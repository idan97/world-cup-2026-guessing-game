// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum Stage {
  GROUP
  R32
  R16
  QF
  SF
  F
}

enum Outcome {
  W
  D
  L
}

enum LeagueRole {
  ADMIN
  PLAYER
}

enum TeamGroup {
  A
  B
  C
  D
  E
  F
  G
  H
  I
  J
  K
  L
}

// Reference tables
model Team {
  id    String    @id // 'FRA'
  name  String    // 'France'
  group TeamGroup

  // Relations
  matchesAsTeamA Match[] @relation("TeamA")
  matchesAsTeamB Match[] @relation("TeamB")
  matchesAsWinner Match[] @relation("Winner")
  advancePicks   AdvancePick[]

  @@map("teams")
}

// Auth & membership
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  displayName String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  leagues  LeagueMember[]
  messages LeagueMessage[]
  form     Form?

  @@map("users")
}

model League {
  id          String   @id @default(cuid())
  name        String
  description String?
  joinCode    String   @unique
  createdAt   DateTime @default(now())

  // Relations
  members   LeagueMember[]
  allowList LeagueAllowEmail[]
  messages  LeagueMessage[]

  @@map("leagues")
}

model LeagueMember {
  leagueId String
  userId   String
  role     LeagueRole
  joinedAt DateTime   @default(now())

  // Relations
  league League @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([leagueId, userId])
  @@map("league_members")
}

model LeagueAllowEmail {
  id       Int        @id @default(autoincrement())
  leagueId String
  email    String
  role     LeagueRole
  addedAt  DateTime   @default(now())

  // Relations
  league League @relation(fields: [leagueId], references: [id], onDelete: Cascade)

  @@unique([leagueId, email])
  @@map("league_allow_emails")
}

model LeagueMessage {
  id        String   @id @default(cuid())
  leagueId  String
  authorId  String
  title     String
  body      String   // markdown
  pinned    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  league League @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  author User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("league_messages")
}

// Prediction containers
model Form {
  id          String    @id @default(cuid())
  ownerId     String    @unique
  nickname    String    // e.g. "Idan #2"
  submittedAt DateTime?
  isFinal     Boolean   @default(false) // true when locked
  totalPoints Int       @default(0)     // running tally
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  owner           User            @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  matchPicks      MatchPick[]
  advancePicks    AdvancePick[]
  topScorerPicks  TopScorerPick[]
  scoringRuns     ScoringRun[]

  @@map("forms")
}

// Static schedule
model Match {
  id           Int       @id // 1-104 (expanded from 64 for 2026)
  stage        Stage
  slot         String    // 'R16-A', 'QF-2' …
  kickoff      DateTime
  teamAId      String?   // filled when known
  teamBId      String?
  scoreA       Int?      // 90-min scores
  scoreB       Int?
  winnerTeamId String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  teamA       Team?       @relation("TeamA", fields: [teamAId], references: [id])
  teamB       Team?       @relation("TeamB", fields: [teamBId], references: [id])
  winnerTeam  Team?       @relation("Winner", fields: [winnerTeamId], references: [id])
  matchPicks  MatchPick[]

  @@map("matches")
}

// User picks
model MatchPick {
  formId      String
  matchId     Int     // slot, not "real" teams
  predScoreA  Int
  predScoreB  Int
  predOutcome Outcome // W / D / L

  // Relations
  form  Form  @relation(fields: [formId], references: [id], onDelete: Cascade)
  match Match @relation(fields: [matchId], references: [id], onDelete: Cascade)

  @@id([formId, matchId])
  @@index([matchId]) // speed up scoring & stage checks
  @@map("match_picks")
}

model AdvancePick {
  formId String
  stage  Stage  // R32 … F (excluding GROUP)
  teamId String // e.g. 'FRA'

  // Relations
  form Form @relation(fields: [formId], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@id([formId, stage, teamId])
  @@index([stage, teamId]) // fast stage checks
  @@map("advance_picks")
}

model TopScorerPick {
  formId     String
  playerName String

  // Relations
  form Form @relation(fields: [formId], references: [id], onDelete: Cascade)

  @@id([formId])
  @@map("top_scorer_picks")
}

// Audit trail
model ScoringRun {
  id      Int      @id @default(autoincrement())
  formId  String
  runAt   DateTime @default(now())
  delta   Int      // +15 pts, −3 pts, etc.
  details Json     // { matchId?: number, stage?: Stage, note?: string }

  // Relations
  form Form @relation(fields: [formId], references: [id], onDelete: Cascade)

  @@map("scoring_runs")
}
